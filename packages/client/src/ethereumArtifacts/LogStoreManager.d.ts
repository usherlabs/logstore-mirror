/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
	EventFragment,
	FunctionFragment,
	Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PayableOverrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers';

import type {
	OnEvent,
	PromiseOrValue,
	TypedEvent,
	TypedEventFilter,
	TypedListener,
} from '../../common';

export interface LogStoreManagerInterface extends utils.Interface {
	functions: {
		'LOGSTORE_QUERY_STREAM_ID_PATH()': FunctionFragment;
		'LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING()': FunctionFragment;
		'LOGSTORE_SYSTEM_STREAM_ID_PATH()': FunctionFragment;
		'LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING()': FunctionFragment;
		'balanceOf(address)': FunctionFragment;
		'capture(string,uint256,uint256)': FunctionFragment;
		'exists(string)': FunctionFragment;
		'initialize(address,address,address)': FunctionFragment;
		'owner()': FunctionFragment;
		'proxiableUUID()': FunctionFragment;
		'renounceOwnership()': FunctionFragment;
		'stake(string,uint256)': FunctionFragment;
		'stakeTokenAddress()': FunctionFragment;
		'storeBalanceOf(address,string)': FunctionFragment;
		'storeStakeholders(string,uint256)': FunctionFragment;
		'stores(string)': FunctionFragment;
		'totalSupply()': FunctionFragment;
		'transferOwnership(address)': FunctionFragment;
		'upgradeTo(address)': FunctionFragment;
		'upgradeToAndCall(address,bytes)': FunctionFragment;
	};

	getFunction(
		nameOrSignatureOrTopic:
			| 'LOGSTORE_QUERY_STREAM_ID_PATH'
			| 'LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING'
			| 'LOGSTORE_SYSTEM_STREAM_ID_PATH'
			| 'LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING'
			| 'balanceOf'
			| 'capture'
			| 'exists'
			| 'initialize'
			| 'owner'
			| 'proxiableUUID'
			| 'renounceOwnership'
			| 'stake'
			| 'stakeTokenAddress'
			| 'storeBalanceOf'
			| 'storeStakeholders'
			| 'stores'
			| 'totalSupply'
			| 'transferOwnership'
			| 'upgradeTo'
			| 'upgradeToAndCall'
	): FunctionFragment;

	encodeFunctionData(
		functionFragment: 'LOGSTORE_QUERY_STREAM_ID_PATH',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'LOGSTORE_SYSTEM_STREAM_ID_PATH',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'balanceOf',
		values: [PromiseOrValue<string>]
	): string;
	encodeFunctionData(
		functionFragment: 'capture',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>
		]
	): string;
	encodeFunctionData(
		functionFragment: 'exists',
		values: [PromiseOrValue<string>]
	): string;
	encodeFunctionData(
		functionFragment: 'initialize',
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<string>
		]
	): string;
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
	encodeFunctionData(
		functionFragment: 'proxiableUUID',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'renounceOwnership',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'stake',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
	): string;
	encodeFunctionData(
		functionFragment: 'stakeTokenAddress',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'storeBalanceOf',
		values: [PromiseOrValue<string>, PromiseOrValue<string>]
	): string;
	encodeFunctionData(
		functionFragment: 'storeStakeholders',
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
	): string;
	encodeFunctionData(
		functionFragment: 'stores',
		values: [PromiseOrValue<string>]
	): string;
	encodeFunctionData(
		functionFragment: 'totalSupply',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'transferOwnership',
		values: [PromiseOrValue<string>]
	): string;
	encodeFunctionData(
		functionFragment: 'upgradeTo',
		values: [PromiseOrValue<string>]
	): string;
	encodeFunctionData(
		functionFragment: 'upgradeToAndCall',
		values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
	): string;

	decodeFunctionResult(
		functionFragment: 'LOGSTORE_QUERY_STREAM_ID_PATH',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'LOGSTORE_SYSTEM_STREAM_ID_PATH',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING',
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'capture', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'proxiableUUID',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'renounceOwnership',
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'stakeTokenAddress',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'storeBalanceOf',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'storeStakeholders',
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: 'stores', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'totalSupply',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'transferOwnership',
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'upgradeToAndCall',
		data: BytesLike
	): Result;

	events: {
		'AdminChanged(address,address)': EventFragment;
		'BeaconUpgraded(address)': EventFragment;
		'DataStored(string,uint256,uint256)': EventFragment;
		'Initialized(uint8)': EventFragment;
		'OwnershipTransferred(address,address)': EventFragment;
		'StoreUpdated(string,bool,uint256)': EventFragment;
		'Upgraded(address)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'DataStored'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'StoreUpdated'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
	previousAdmin: string;
	newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
	[string, string],
	AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
	beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
	[string],
	BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DataStoredEventObject {
	store: string;
	fees: BigNumber;
	bytesStored: BigNumber;
}
export type DataStoredEvent = TypedEvent<
	[string, BigNumber, BigNumber],
	DataStoredEventObject
>;

export type DataStoredEventFilter = TypedEventFilter<DataStoredEvent>;

export interface InitializedEventObject {
	version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
	previousOwner: string;
	newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
	[string, string],
	OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
	TypedEventFilter<OwnershipTransferredEvent>;

export interface StoreUpdatedEventObject {
	store: string;
	isNew: boolean;
	amount: BigNumber;
}
export type StoreUpdatedEvent = TypedEvent<
	[string, boolean, BigNumber],
	StoreUpdatedEventObject
>;

export type StoreUpdatedEventFilter = TypedEventFilter<StoreUpdatedEvent>;

export interface UpgradedEventObject {
	implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface LogStoreManager extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	interface: LogStoreManagerInterface;

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TEvent>>;

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>
	): Array<TypedListener<TEvent>>;
	listeners(eventName?: string): Array<Listener>;
	removeAllListeners<TEvent extends TypedEvent>(
		eventFilter: TypedEventFilter<TEvent>
	): this;
	removeAllListeners(eventName?: string): this;
	off: OnEvent<this>;
	on: OnEvent<this>;
	once: OnEvent<this>;
	removeListener: OnEvent<this>;

	functions: {
		LOGSTORE_QUERY_STREAM_ID_PATH(overrides?: CallOverrides): Promise<[string]>;

		LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<[string]>;

		LOGSTORE_SYSTEM_STREAM_ID_PATH(
			overrides?: CallOverrides
		): Promise<[string]>;

		LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<[string]>;

		balanceOf(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		capture(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			bytesStored: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>;

		exists(
			streamId: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		initialize(
			owner_: PromiseOrValue<string>,
			stakeTokenAddress_: PromiseOrValue<string>,
			streamrRegistryAddress_: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>;

		owner(overrides?: CallOverrides): Promise<[string]>;

		proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>;

		stake(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>;

		stakeTokenAddress(overrides?: CallOverrides): Promise<[string]>;

		storeBalanceOf(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		storeStakeholders(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides
		): Promise<[string]>;

		stores(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<[BigNumber]>;

		totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>;

		upgradeTo(
			newImplementation: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>;

		upgradeToAndCall(
			newImplementation: PromiseOrValue<string>,
			data: PromiseOrValue<BytesLike>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
		): Promise<ContractTransaction>;
	};

	LOGSTORE_QUERY_STREAM_ID_PATH(overrides?: CallOverrides): Promise<string>;

	LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING(
		overrides?: CallOverrides
	): Promise<string>;

	LOGSTORE_SYSTEM_STREAM_ID_PATH(overrides?: CallOverrides): Promise<string>;

	LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING(
		overrides?: CallOverrides
	): Promise<string>;

	balanceOf(
		arg0: PromiseOrValue<string>,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	capture(
		streamId: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		bytesStored: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>;

	exists(
		streamId: PromiseOrValue<string>,
		overrides?: CallOverrides
	): Promise<boolean>;

	initialize(
		owner_: PromiseOrValue<string>,
		stakeTokenAddress_: PromiseOrValue<string>,
		streamrRegistryAddress_: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>;

	owner(overrides?: CallOverrides): Promise<string>;

	proxiableUUID(overrides?: CallOverrides): Promise<string>;

	renounceOwnership(
		overrides?: Overrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>;

	stake(
		streamId: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>;

	stakeTokenAddress(overrides?: CallOverrides): Promise<string>;

	storeBalanceOf(
		arg0: PromiseOrValue<string>,
		arg1: PromiseOrValue<string>,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	storeStakeholders(
		arg0: PromiseOrValue<string>,
		arg1: PromiseOrValue<BigNumberish>,
		overrides?: CallOverrides
	): Promise<string>;

	stores(
		arg0: PromiseOrValue<string>,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

	transferOwnership(
		newOwner: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>;

	upgradeTo(
		newImplementation: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>;

	upgradeToAndCall(
		newImplementation: PromiseOrValue<string>,
		data: PromiseOrValue<BytesLike>,
		overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
	): Promise<ContractTransaction>;

	callStatic: {
		LOGSTORE_QUERY_STREAM_ID_PATH(overrides?: CallOverrides): Promise<string>;

		LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<string>;

		LOGSTORE_SYSTEM_STREAM_ID_PATH(overrides?: CallOverrides): Promise<string>;

		LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<string>;

		balanceOf(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		capture(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			bytesStored: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides
		): Promise<boolean>;

		exists(
			streamId: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<boolean>;

		initialize(
			owner_: PromiseOrValue<string>,
			stakeTokenAddress_: PromiseOrValue<string>,
			streamrRegistryAddress_: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<void>;

		owner(overrides?: CallOverrides): Promise<string>;

		proxiableUUID(overrides?: CallOverrides): Promise<string>;

		renounceOwnership(overrides?: CallOverrides): Promise<void>;

		stake(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides
		): Promise<void>;

		stakeTokenAddress(overrides?: CallOverrides): Promise<string>;

		storeBalanceOf(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		storeStakeholders(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides
		): Promise<string>;

		stores(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<void>;

		upgradeTo(
			newImplementation: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<void>;

		upgradeToAndCall(
			newImplementation: PromiseOrValue<string>,
			data: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides
		): Promise<void>;
	};

	filters: {
		'AdminChanged(address,address)'(
			previousAdmin?: null,
			newAdmin?: null
		): AdminChangedEventFilter;
		AdminChanged(
			previousAdmin?: null,
			newAdmin?: null
		): AdminChangedEventFilter;

		'BeaconUpgraded(address)'(
			beacon?: PromiseOrValue<string> | null
		): BeaconUpgradedEventFilter;
		BeaconUpgraded(
			beacon?: PromiseOrValue<string> | null
		): BeaconUpgradedEventFilter;

		'DataStored(string,uint256,uint256)'(
			store?: null,
			fees?: null,
			bytesStored?: null
		): DataStoredEventFilter;
		DataStored(
			store?: null,
			fees?: null,
			bytesStored?: null
		): DataStoredEventFilter;

		'Initialized(uint8)'(version?: null): InitializedEventFilter;
		Initialized(version?: null): InitializedEventFilter;

		'OwnershipTransferred(address,address)'(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null
		): OwnershipTransferredEventFilter;
		OwnershipTransferred(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null
		): OwnershipTransferredEventFilter;

		'StoreUpdated(string,bool,uint256)'(
			store?: null,
			isNew?: null,
			amount?: null
		): StoreUpdatedEventFilter;
		StoreUpdated(
			store?: null,
			isNew?: null,
			amount?: null
		): StoreUpdatedEventFilter;

		'Upgraded(address)'(
			implementation?: PromiseOrValue<string> | null
		): UpgradedEventFilter;
		Upgraded(
			implementation?: PromiseOrValue<string> | null
		): UpgradedEventFilter;
	};

	estimateGas: {
		LOGSTORE_QUERY_STREAM_ID_PATH(
			overrides?: CallOverrides
		): Promise<BigNumber>;

		LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<BigNumber>;

		LOGSTORE_SYSTEM_STREAM_ID_PATH(
			overrides?: CallOverrides
		): Promise<BigNumber>;

		LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<BigNumber>;

		balanceOf(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		capture(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			bytesStored: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>;

		exists(
			streamId: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		initialize(
			owner_: PromiseOrValue<string>,
			stakeTokenAddress_: PromiseOrValue<string>,
			streamrRegistryAddress_: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>;

		owner(overrides?: CallOverrides): Promise<BigNumber>;

		proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>;

		stake(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>;

		stakeTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

		storeBalanceOf(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		storeStakeholders(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		stores(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>;

		upgradeTo(
			newImplementation: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>;

		upgradeToAndCall(
			newImplementation: PromiseOrValue<string>,
			data: PromiseOrValue<BytesLike>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
		): Promise<BigNumber>;
	};

	populateTransaction: {
		LOGSTORE_QUERY_STREAM_ID_PATH(
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		LOGSTORE_QUERY_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		LOGSTORE_SYSTEM_STREAM_ID_PATH(
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		LOGSTORE_SYSTEM_STREAM_METADATA_JSON_STRING(
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		balanceOf(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		capture(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			bytesStored: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>;

		exists(
			streamId: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		initialize(
			owner_: PromiseOrValue<string>,
			stakeTokenAddress_: PromiseOrValue<string>,
			streamrRegistryAddress_: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>;

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		renounceOwnership(
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>;

		stake(
			streamId: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>;

		stakeTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		storeBalanceOf(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		storeStakeholders(
			arg0: PromiseOrValue<string>,
			arg1: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		stores(
			arg0: PromiseOrValue<string>,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>;

		upgradeTo(
			newImplementation: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>;

		upgradeToAndCall(
			newImplementation: PromiseOrValue<string>,
			data: PromiseOrValue<BytesLike>,
			overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
		): Promise<PopulatedTransaction>;
	};
}
